stages:
  - build
  - test
  - build_main
  - deploy
  - cleanup

variables:
  BT_LOGGING_DIR: /var/log/battletrack
  IMAGE_REGISTRY: registry.gitlab.com/lucaspickering/battletrack
  BACKEND_IMAGE: ${IMAGE_REGISTRY}/backend:${CI_COMMIT_REF_SLUG}
  FRONTEND_IMAGE: ${IMAGE_REGISTRY}/frontend:${CI_COMMIT_REF_SLUG}
  PROD_IMAGE: ${IMAGE_REGISTRY}/prod:${CI_COMMIT_REF_SLUG}
  DEPLOY_HOST: tcp://battletrack.lucaspickering.me:2375
  DEPLOY_CERT_PATH: /home/gitlab-runner/certs/battletrack

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com


# BUILD
build_backend:
  stage: build
  tags:
    - shell
  script:
    - git submodule init && git submodule update
    - docker build --pull -t $BACKEND_IMAGE backend/
    - docker push $BACKEND_IMAGE

build_frontend:
  stage: build
  tags:
    - shell
  script:
    - git submodule init && git submodule update
    - docker build --pull -t $FRONTEND_IMAGE frontend/
    - docker push $FRONTEND_IMAGE


# TEST
test_backend:
  stage: test
  tags:
    - shell
  script:
    - docker-compose -f docker-compose.test.yml pull
    - docker-compose -f docker-compose.test.yml run backend
    - docker-compose rm -s -f

test_frontend:
  stage: test
  tags:
    - shell
  script:
    - docker-compose -f docker-compose.test.yml pull
    - docker-compose -f docker-compose.test.yml run frontend
    - docker-compose rm -s -f


# BUILD MAIN
build_main:
  stage: build_main
  only:
    - master
    - nginx-monitoring  # TODO: Remove this
  tags:
    - shell
  script:
    - docker build --pull -t $PROD_IMAGE --build-arg tag=${CI_COMMIT_REF_SLUG} prod/
    - docker push $PROD_IMAGE


# DEPLOY
deploy:
  stage: deploy
  only:
    - master
  variables:
    DOCKER_HOST: $DEPLOY_HOST
    DOCKER_TLS_VERIFY: "1"
    DOCKER_CERT_PATH: $DEPLOY_CERT_PATH
  tags:
    - shell
  script:
    # I AM PETER DEPLOYERS
    - docker-compose -f prod/docker-compose.yml pull
    - docker stack deploy -c prod/docker-compose.yml --with-registry-auth battletrack


# CLEANUP
local_cleanup:
  stage: cleanup
  tags:
    - shell
  script:
    - docker system prune -f

remote_cleanup:
  stage: cleanup
  only:
    - master
  variables:
    DOCKER_HOST: $DEPLOY_HOST
    DOCKER_TLS_VERIFY: "1"
    DOCKER_CERT_PATH: $DEPLOY_CERT_PATH
  tags:
    - shell
  script:
    - docker system prune -f
